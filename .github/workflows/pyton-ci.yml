name: Python CI pipeline

on:
  push:
    branches:
      - "main"
    paths:
      - "backend/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ROOT_USER: ${{ secrets.MINIO_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
        ports:
          - "9000:9000"
          - "9001:9001"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create temporary env file
        run: |
          env_file=$(mktemp)
          echo "MINIO_SECRET_KEY=${{ secrets.MINIO_USER }}" >> $env_file
          echo "MINIO_ACCESS_KEY=${{ secrets.MINIO_PASSWORD}}" >> $env_file
          echo "MINIO_URL=localhost:9000" >> $env_file
          echo "MINIO_BUCKET_NAME=test-bucket" >> $env_file
          echo "env_file=$env_file" >> $GITHUB_ENV

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Wait for MinIO to be ready
        run: |
          for in in {1..10}; do
            nc -zv localhost 9000 && echo "MinIO is ready" && break
            echo "Waiting for MinIO to be ready..."
            sleep 5
          done
          nc -zv localhost 9000 || { echo "MinIO failed to start"; exit 1; }

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run linting
        run: |
          flake8 --exclude=venv

      - name: Run tests with coverage
        env:
          ENV_FILE: ${{ env.env_file }}
        run: |
          pytest --cov=backend

      - name: upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports/

      - name: Run app
        run: |
          uvicorn backend.api.main:app &
          for i in {1..30}; do
            curl --fail http://localhost:8000/health && break
            echo "Waiting for app to start..."
            sleep 1
          done
          curl --fail http://localhost:8000/health || { echo "App failed to start"; exit 1; }
